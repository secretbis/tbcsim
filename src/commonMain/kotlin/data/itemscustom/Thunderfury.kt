package data.itemscustom

import character.*
import data.Constants
import data.model.Item
import data.model.ItemSet
import data.model.Socket
import data.model.SocketBonus
import sim.Event
import sim.EventResult
import sim.EventType
import sim.SimParticipant
import kotlin.js.JsExport

@JsExport
class Thunderfury : Item() {
    override var isAutoGenerated: Boolean = false

    override var id: Int = 19019
    override var name: String = "Thunderfury, Blessed Blade of the Windseeker"
    override var itemLevel: Int = 80
    override var quality: Int = 5
    override var icon: String = "inv_sword_39.jpg"
    override var itemSet: ItemSet? = null
    override var inventorySlot: Int = 13
    override var itemClass: Constants.ItemClass? = Constants.ItemClass.WEAPON
    override var itemSubclass: Constants.ItemSubclass? = Constants.ItemSubclass.SWORD_1H
    override var allowableClasses: Array<Constants.AllowableClass>? = null
    override var minDmg: Double = 44.0
    override var maxDmg: Double = 115.0
    override var speed: Double = 1900.0
    override var stats: Stats = Stats(
        stamina = 8,
        agility = 5,
        fireResistance = 8,
        natureResistance = 9
    )
    override var sockets: Array<Socket> = arrayOf()
    override var socketBonus: SocketBonus? = null
    override var phase = 1

    val tfProc = object : Proc() {
        override val triggers: List<Trigger> = listOf(
            Trigger.MELEE_AUTO_HIT,
            Trigger.MELEE_AUTO_CRIT,
            Trigger.MELEE_WHITE_HIT,
            Trigger.MELEE_WHITE_CRIT,
            Trigger.MELEE_YELLOW_HIT,
            Trigger.MELEE_YELLOW_CRIT,
            Trigger.MELEE_BLOCK,
            Trigger.MELEE_GLANCE,
        )

        // Per FC testing
        override val type: Type = Type.PPM
        override val ppm: Double = 6.0

        override fun proc(sp: SimParticipant, items: List<Item>?, ability: Ability?, event: Event?) {
            // Debuffs
            sp.sim.target.addDebuff(
                object : Debuff(sp) {
                    override val name: String = "Thunderfury (debuff)"
                    override val durationMs: Int = 12000
                    override val icon: String = this@Thunderfury.icon

                    override fun modifyStats(sp: SimParticipant): Stats {
                        return Stats(
                            physicalHasteMultiplier = 0.8,
                            natureResistance = -25
                        )
                    }
                }
            )

            // Damage
            sp.logEvent(Event(
                eventType = EventType.DAMAGE,
                damageType = Constants.DamageType.NATURE,
                ability = object : Ability() {
                    override val name: String = this@Thunderfury.name
                    override val icon: String = this@Thunderfury.icon
                },
                amount = 300.0,
                result = EventResult.HIT,
            ))
        }
    }

    override val buffs: List<Buff> = listOf(
        object : Buff() {
            override val name: String = "Thunderfury (static)"
            override val durationMs: Int = -1
            override val hidden: Boolean = true
            override val icon: String = this@Thunderfury.icon

            override fun procs(sp: SimParticipant): List<Proc> = listOf(tfProc)
        }
    )
}
